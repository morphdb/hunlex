#########################################################
# hunlex as default is assumed to be found in the path with name 'hunlex'
HUNLEX?=hunlex
# hunmorph as default is assumed to be found in the path with name 'hunmorph'
HUNMORPH?=hunmorph
# ocamorph is assumed to be found in the path with name 'ocamorph'
OCAMORPH?=ocamorph

##########################################################
# the resource files for hunlex to input
# we assume a root directory containing the 
# resource files with standard names
# ideally you just pass a different value for ROOT
# to a toplevel make process 
QUIET?=@
TIME?=time

# basic input file options
ROOT?=.
RES_ROOT?=$(ROOT)
INPUTDIR?=$(RES_ROOT)/in
TMPDIR=$(RES_ROOT)/tmp
GRAMMARDIR?=$(INPUTDIR)
CONFDIR?=$(INPUTDIR)
OUTPUTDIR?=$(RES_ROOT)/out
LEXICON?=$(GRAMMARDIR)/lexicon
GRAMMAR?=$(GRAMMARDIR)/grammar
USAGE?=$(CONFDIR)/usage.conf
MORPH?=$(CONFDIR)/morph.conf
PHONO?=$(CONFDIR)/phono.conf
ANNOT?=$(CONFDIR)/annot.conf

# the input file arguments as passed to hunlex
LEXICON_ARG=$(LEXICON:%=-lexicon %)
GRAMMAR_ARG=$(GRAMMAR:%=-grammar %)
USAGE_ARG=$(USAGE:%=-usage %)
MORPH_ARG=$(MORPH:%=-morph %)
PHONO_ARG=$(PHONO:%=-phono %)
ANNOT_ARG=$(ANNOT:%=-annot %)

# call it signature.conf or fs.conf
# in order to use fs the SIGNATURE option has to be given
# otherwise it defaults to None
SIGNATURE_ARG=$(SIGNATURE:%=-signature %)
# call it flags.conf
FLAGS_ARG=$(FLAGS:%=-flags %)

DUMMY=$(TMPDIR)/dummy
PROJECT?=hu_HU

# hunlex output filenames
# aff/dic which are always generated
AFF?=$(OUTPUTDIR)/$(PROJECT).aff
DIC?=$(OUTPUTDIR)/$(PROJECT).dic
BIN?=$(OUTPUTDIR)/$(PROJECT).bin
# wordlist generated by generate 
WORDLIST?=$(OUTPUTDIR)/wordlist
SYNTH_IN_ARG=$(SYNTH_IN:%=-synth-in %)
SYNTH_OUT_ARG=$(SYNTH_IN:%=-synth-out %)


# hunlex output formatting options
LEMMA_DELIM_ARG=$(LEMMA_DELIM:%=-lemma_delim %)
TAG_DELIM_ARG=$(TAG_DELIM:%=-tag_delim %)
OUT_DELIM_ARG=$(OUT_DELIM:%=-out_delim %)

# hunlex output mode options
MODE_ARG=$(MODE:%=-mode %)
STEMINFO_ARG=$(STEMINFO:%=-steminfo %)
FS_INFO_ARG=$(FS_DEBUG:%=-fs_debug)
DOUBLE_FLAGS_ARG=$(DOUBLE_FLAGS:%=-double_flags)

# hunlex compiler options
MAX_LEVEL_ARG=$(MAX_LEVEL:%=-max_level %) 
MIN_LEVEL_ARG=$(MIN_LEVEL:%=-min_level %)

# further hunlex options
DEBUG_LEVEL_ARG=$(DEBUG_LEVEL:%=-debug_level %)
GRAMMAR_DEBUG_ARG=$(GRAMMAR_DEBUG:%=-grammar_debug)

# hunmorph test channel
# now obsoleted
#TEST?=/dev/stdin
TEST?=

# preamble files for hunlex output files 
# these are meant to be 'official' comment headers
AFF_PREAMBLE?=
AFF_META?=$(TMPDIR)/aff_meta
DIC_PREAMBLE?=
# these are for hunspell output mode
CHAR_CONVERSION_TABLE?=
REPLACEMENT_TABLE?=

AFF_SETTINGS=aff_settings

#######################################################
# the default target simply creates aff and dic files
resources: $(AFF) $(DIC)

# DUMMY TARGET for dependencies
new: $(TMPDIR)
	$(QUIET)touch $(DUMMY)

$(DUMMY): $(TMPDIR)


#######################################################
# generate a raw word list from the dictionary output
# this is meant to be used with setting MIN_LEVEL
# (to a reasonably large number) so that all forms
# are generated in the lexicon (into the dictionary output)
# this wordlist then is suitable for testing coverage
# see also test targets

generate: $(WORDLIST)

$(WORDLIST): $(DUMMY)
	make MIN_LEVEL=10000 resources
	cut -s -f1 $(DIC) | cut -d'/' -f1 > $@

generate_synth:
	make MIN_LEVEL=1000 STEMINFO=Lemma FS_DEBUG=yes new $(DIC)
	cut -s -f2- $(DIC) | sort -u | cut -d'/' -f1 > $(SYNTH_IN)


##########################################################
# test targets:
# these targets need hunmorph up and running
# test tests from the channel set by TEST
# e.g., 
# make TEST=mytestfile test
# test outputs are to stdout, so just pipe it to a file
# e.g. 
# make TEST=mytestfile test > test.out 2> test.log
ctest: $(AFF) $(DIC)
	$(HUNMORPH) $(AFF) $(DIC) $(TEST)

bin: $(BIN)

$(BIN):	$(AFF) $(DIC)
	$(QUIET)echo "Generate ocamorph native format\n"
	$(QUIET)echo "" | $(OCAMORPH) --dic $(DIC) --aff $(AFF) --bin $@ --debug_level 1 > /dev/null

otest: $(BIN)
	cat $(TEST) | $(OCAMORPH) --bin $(BIN)

# testwordlist tests a word list
testwordlist: # $(AFF) $(DIC) $(WORDLIST) # $(HUNMORPH)
	$(HUNMORPH) $(AFF) $(DIC) $(WORDLIST)

# realtest tests the word list generated by generate 
# with setting MIN_LEVEL=1000 which is meant to 
# generate all forms in the the dic file 
# be cautious with large lexicons
realtest: 
	$(QUIET)touch $(DUMMY)
	$(QUIET)make $(WORDLIST) 
	$(QUIET)make clean resources testwordlist

real_synth_test: generate_synth synthesize



#############################################################
# aff and dic file creation

# the main invocation of hunlex 
# creating the output raw dic and aff files

$(TMPDIR)/dic $(TMPDIR)/aff: $(TMPDIR) $(LEXICON) $(GRAMMAR) $(MORPH) $(PHONO) $(USAGE) $(DUMMY) # $(HUNLEX)
	$(QUIET)$(TIME) $(HUNLEX) \
                  -aff     $(TMPDIR)/aff  \
                  -dic     $(TMPDIR)/dic    \
                  $(LEXICON_ARG)  \
                  $(GRAMMAR_ARG)  \
                  $(MORPH_ARG) \
                  $(PHONO_ARG) \
                  $(USAGE_ARG) \
                  $(ANNOT_ARG) \
                  $(SIGNATURE_ARG) \
                  $(FLAGS_ARG) \
                  $(MODE_ARG) \
                  $(STEMINFO_ARG) \
                  $(DOUBLE_FLAGS_ARG) \
                  $(TAG_DELIM_ARG) \
                  $(LEMMA_DELIM_ARG) \
                  $(OUT_DELIM_ARG) \
                  $(MIN_LEVEL_ARG) \
                  $(MAX_LEVEL_ARG) \
                  $(DEBUG_LEVEL_ARG) \
                  $(GRAMMAR_DEBUG_ARG) \
                  $(FS_DEBUG_ARG) 

$(AFF_META): $(DUMMY)
	$(QUIET)echo "# generated by Hunlex toplevel makefile " > $@
	$(QUIET)echo "#  at" `date` >> $@
	$(QUIET)echo >> $@

# aff file is generated by appending preamble and raw hunlex aff
# preamble is: comment header, variable settings (important), 
# character conversion and replacement table (latter two for hunspell)
$(AFF): $(OUTPUTDIR) $(AFF_META) $(AFF_PREAMBLE) $(REPLACEMENT_TABLE) $(CHAR_CONVERTION_TABLE) $(TMPDIR)/aff $(DUMMY)
	$(QUIET)cat $(AFF_META) $(AFF_PREAMBLE) $(REPLACEMENT_TABLE) $(CHAR_CONVERTION_TABLE) $(TMPDIR)/aff > $@

# dic file is generated by appending 
# preamble, wordcount and hunlex raw dic
$(DIC): $(OUTPUTDIR) $(DIC_PREAMBLE) $(TMPDIR)/dic $(DUMMY)
	$(QUIET)cat $(DIC_PREAMBLE) $(TMPDIR)/dic > $@


#########################################################
#
clean: 
	$(QUIET)rm -f $(TMPDIR)/*

distclean: 
	$(QUIET)rm -rf $(TMPDIR) $(AFF) $(DIC)

# $(AFF_SETTINGS).tmp dic_wc.tmp $(DIC).tmp $(AFF).tmp

############################################################

$(TMPDIR) $(OUTPUTDIR) ONFDIR) $(GRAMMARDIR):
	mkdir -p $@


#############################################################
# empty input files are created if they don't exist

$(GRAMMARDIR)/lexicon: $(GRAMMARDIR)
	$(QUIET)[ -f $@ ] || touch $@

$(GRAMMARDIR)/grammar: $(GRAMMARDIR)
	$(QUIET)[ -f $@ ] || touch $@

$(CONFDIR)/morph.conf: $(CONFDIR)
	$(QUIET)[ -f $@ ] || touch $@

$(CONFDIR)/phono.conf: $(CONFDIR)
	$(QUIET)[ -f $@ ] || touch $@

$(CONFDIR)/usage.conf: $(CONFDIR)
	$(QUIET)[ -f $@ ] || touch $@
